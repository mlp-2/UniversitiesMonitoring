using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using UniversityMonitoring.Data;
using UniversityMonitoring.Data.Entities;

namespace UniversitiesMonitoring.NotifyService.Notifying;

internal class GlobalTelegramNotifying
{
    private readonly TelegramBotClient _botClient;
    private readonly ChatId _globalChatId;

    public GlobalTelegramNotifying(IConfiguration configuration)
    {
        _botClient = new TelegramBotClient(
            Environment.GetEnvironmentVariable("TELEGRAM_TOKEN") ??
            configuration["TelegramToken"]);
        _globalChatId = Environment.GetEnvironmentVariable("TELEGRAM_CHAT_ID") ??
                        configuration["TelegramChatId"];
    }

    public async Task NotifyAsync(IEnumerable<UniversityServiceEntity> changedServices)
    {
        var services = changedServices.ToArray();
        var reportBuilder = new StringBuilder("‚ö°Ô∏èüì¢ *–ü–æ—è–≤–∏–ª–∏—Å—å —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ*\n");

        foreach (var service in services)
        {
            reportBuilder.AppendLine(GenerateStatus(service));
        }

        var report = reportBuilder.ToString();

        await _botClient.SendTextMessageAsync(_globalChatId, report, ParseMode.Markdown);
    }

    private string GenerateStatus(UniversityServiceEntity serviceEntity) =>
        $"- –°–µ—Ä–≤–∏—Å [\"{serviceEntity.ServiceName}\"]({serviceEntity.GenerateUrl()}) –í–£–ó–∞ [\"{serviceEntity.UniversityName}\"]({serviceEntity.Url}) —Å–º–µ–Ω–∏–ª —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {(serviceEntity.IsOnline ? "–æ–Ω–ª–∞–π–Ω üü¢" : "–æ—Ñ—Ñ–ª–∞–π–Ω üî¥")}";
}