using System.Net;
using System.Net.Mail;
using UniversityMonitoring.Data;
using UniversityMonitoring.Data.Entities;

namespace UniversitiesMonitoring.NotifyService.Notifying;

internal class EmailNotifier
{
    private readonly SmtpClient _emailClient;
    private readonly MailAddress _mailAddress;

    public EmailNotifier(IConfiguration configuration)
    {
        var address = Environment.GetEnvironmentVariable("EMAIL_ADDRESS") ?? configuration["Email:Username"];
        _mailAddress = new MailAddress(address);
        _emailClient = new SmtpClient()
        {
            Host = Environment.GetEnvironmentVariable("SMTP_HOST")!,
            Port = int.Parse(Environment.GetEnvironmentVariable("SMTP_PORT")!),
            Credentials = new NetworkCredential(address,
                Environment.GetEnvironmentVariable("EMAIL_PASSWORD") ?? configuration["Email:Password"]),
            EnableSsl = false
        };
    }

    public async Task NotifyAsync(UserEntity userEntity, UniversityServiceEntity serviceEntity)
    {
        if (userEntity.Email == null) return;
        var message = CreateMailMessage(serviceEntity);
        message.To.Add(userEntity.Email);

        await _emailClient.SendMailAsync(message);
    }

    private MailMessage CreateMailMessage(UniversityServiceEntity service) =>
        new()
        {
            From = _mailAddress,
            Subject = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞",
            Body =
                $"<b>üì¢ –°–µ—Ä–≤–∏—Å <a href=\"{service.GenerateUrl()}\">{service.ServiceName}</a> –í–£–ó–∞ <a href=\"{service.Url}\">{service.UniversityName}</a> –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {(service.IsOnline ? "–æ–Ω–ª–∞–π–Ω üü¢" : "–æ—Ñ–ª–∞–π–Ω üî¥")}</b><br/>",
            IsBodyHtml = true
        };
}